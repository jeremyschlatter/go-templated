package main

import (
	"flag"
	"go/build"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"text/template"
)

var mainTmpl = `package main

import (
	"io"
	"os"
	"text/template"

	{{printf "%q" .Import}}
)

func main() {
	f, err := os.Create("generated.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()
	io.WriteString(f, "// DO NOT EDIT. This file was automatically generated by go-templated\n\n")
	template.Must(template.New("").Parse({{.Package}}.{{.Template}})).Execute(f, {{.Package}}.{{.Value}})
}`

var tmpGenTmpl = `package {{.Package}}

var {{.Exported.Template}} = {{.Template}}
var {{.Exported.Value}} = {{.Value}}
`

func main() {
	log.SetFlags(0)
	flag.Parse()
	if flag.NArg() != 2 {
		log.Panicf("Usage: %s <template> <value>\n", os.Args[0])
	}

	pkg, err := build.ImportDir(".", 0)
	if err != nil {
		log.Panic(err)
	}
	tmpl := flag.Arg(0)
	value := flag.Arg(1)

	writeTmp := func(dir, tmpl string, value interface{}) string {
		f, err := ioutil.TempFile(dir, "go-templated")
		if err != nil {
			log.Panic(err)
		}
		defer os.Rename(f.Name(), f.Name()+".go")
		defer f.Close()
		template.Must(template.New("").Parse(tmpl)).Execute(f, value)

		return f.Name() + ".go"
	}
	defer os.Remove(
		writeTmp(".", tmpGenTmpl, map[string]interface{}{
			"Package":  pkg.Name,
			"Template": tmpl,
			"Value":    value,
			"Exported": map[string]string{
				"Template": "TheTemplate",
				"Value":    "TheValue",
			},
		}))
	d, err := ioutil.TempDir(".", "")
	if err != nil {
		log.Panic(err)
	}
	defer os.RemoveAll(d)
	mainFile := writeTmp(d, mainTmpl, map[string]interface{}{
		"Package":  pkg.Name,
		"Import":   "..",
		"Template": "TheTemplate",
		"Value":    "TheValue",
	})
	defer os.Remove(mainFile)

	cmd := exec.Command("go", "run", mainFile)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		log.Panic(err)
	}
}
